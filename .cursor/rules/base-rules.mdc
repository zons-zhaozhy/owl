---
description: 
globs: 
alwaysApply: true
---
# OWL Framework Development Guidelines

## 核心原则
### 可以用英文思考，但尽量用中文回复

### 0. 项目路径规范
- 所有开发必须在 `/Users/stan/code/ai/github/fock/owl/community_usecase/requirements-analysis-assistant` 目录下进行
- 严格禁止在根目录下创建 src 等项目文件
- 保持项目结构的独立性和清晰性

### 1. 代码组织与重复预防
- 开发前必须全面扫描分析目录结构
- 严格遵循单一职责原则
- 禁止创建重复的模块和功能
- 遵循以下目录结构规范：
  ```
  requirements-analysis-assistant/
  ├── src/
  │   ├── owl_requirements/      # 核心功能模块
  │   │   ├── agents/           # 智能体实现
  │   │   ├── core/             # 核心功能
  │   │   ├── services/         # 服务层
  │   │   └── utils/            # 通用工具
  │   ├── web/                  # Web界面
  │   ├── cli/                  # CLI接口
  │   └── config/               # 配置
  ├── tests/                    # 测试用例
  └── docs/                     # 文档
  ```
- 删除或合并重复的模块：
  * 合并 src/agents 到 src/owl_requirements/agents
  * 合并 src/utils 到 src/owl_requirements/utils
  * 合并 src/services 到 src/owl_requirements/services
  * 合并 src/llm 到 src/owl_requirements/services
  * 删除多余的 extractors 目录

### 2. 开发流程规范
- 开发新功能前必须：
  1. 扫描现有代码避免重复
  2. 确认功能在现有模块中的位置
  3. 遵循统一的命名规范
  4. 编写测试用例
  5. 更新文档

- 修改现有代码时必须：
  1. 检查依赖关系
  2. 确保向后兼容
  3. 验证测试用例
  4. 更新相关文档

- 重构代码时必须：
  1. 保持功能不变
  2. 逐步进行，避免大规模改动
  3. 确保测试覆盖
  4. 及时提交变更

### 3. 主线流程开发
- 围绕需求分析助手的核心功能：
  1. 需求提取
  2. 需求分析
  3. 文档生成
  4. 质量检查
- 每个步骤必须：
  1. 明确输入输出
  2. 定义接口规范
  3. 编写单元测试
  4. 进行集成测试

### 4. 系统集成最佳实践
- **类型安全与枚举使用**：
  * 确保在使用枚举类型时进行正确的类型转换，如将字符串转换为枚举值 `LLMProvider(system_config.llm_provider)`
  * 使用类型注解和类型检查来避免类型不匹配错误
  * 在接口定义中明确参数和返回值的类型
  * 对于外部输入数据进行类型验证和转换

- **配置与接口一致性**：
  * 确保配置对象的接口与使用它们的代码保持一致
  * 统一命名约定，避免如`llm_provider`和`provider`这样的不一致
  * 使用配置验证机制确保配置完整性
  * 提供合理的默认值和配置示例

- **异常处理与日志记录**：
  * 实现更细粒度的异常处理，捕获特定类型的错误
  * 使用结构化日志记录，包含足够的上下文信息
  * 对于LLM响应，记录原始响应和处理后的结果
  * 使用不同的日志级别区分信息、警告和错误
  * 实现集中式的错误处理机制

- **命令行接口设计**：
  * 统一主程序和子命令的参数处理逻辑
  * 提供清晰的帮助信息和示例
  * 实现参数验证和默认值处理
  * 支持配置文件和环境变量作为参数来源
  * 提供交互式和批处理模式

- **模块化设计与依赖注入**：
  * 使用依赖注入模式传递服务和配置
  * 避免在构造函数中重复调用配置方法
  * 明确定义组件间的接口和职责
  * 使用工厂模式创建和管理服务实例
  * 实现可测试的组件设计

- **Web应用最佳实践**：
  * 添加根路径处理和API文档
  * 实现健康检查和状态端点
  * 使用中间件处理CORS和错误
  * 提供API版本控制机制
  * 实现请求限流和安全防护

- **测试与调试策略**：
  * 实现系统化的测试策略，覆盖所有运行模式
  * 添加详细的调试日志和诊断工具
  * 使用模拟对象测试LLM集成
  * 实现端到端测试场景
  * 提供性能基准测试

### 5. 多模式运行问题排查指南
- **Once模式问题排查**：
  * 确认命令行参数格式：`python main.py -m once -t "需求文本"`
  * 检查LLM响应处理逻辑，确保能正确提取JSON
  * 验证提示模板中的参数名与代码中使用的一致（如`{input}`vs`input_text`）
  * 检查JSON序列化逻辑，确保对象可序列化或提前转换为基本类型

- **CLI模式问题排查**：
  * 确认命令行参数解析逻辑与Typer库的使用方式一致
  * 检查子命令的定义和参数配置
  * 验证CLI应用的初始化和调用方式
  * 确保CLI模式下的异常处理和输出格式化

- **Web模式问题排查**：
  * 检查端口配置和占用情况
  * 验证路由定义和处理函数
  * 确认CORS和中间件配置
  * 测试API端点的响应格式和状态码
  * 添加根路径处理和重定向

### 6. 代码调试与问题解决思路
1. **系统化分析问题**：
   - 先理解错误消息和堆栈跟踪
   - 识别问题发生的具体位置和上下文
   - 检查相关组件的接口和实现
   - 分析数据流和控制流

2. **增量式修复策略**：
   - 一次只修改一个问题
   - 每次修改后验证效果
   - 保持修改的最小化和针对性
   - 记录修改内容和原因

3. **全面测试验证**：
   - 测试所有运行模式（once、cli、web）
   - 验证边缘情况和错误处理
   - 确认修复不会引入新问题
   - 更新测试用例反映修复

4. **文档和知识共享**：
   - 记录问题原因和解决方案
   - 更新开发指南和最佳实践
   - 分享经验教训和预防措施
   - 改进错误处理和日志记录

### 1. 理解与准确性
- 深入分析用户输入
- 避免对用户意图做假设
- 遇到不确定时，提出具体的针对性问题
- 保持对话上下文的连续性
- 追踪并总结用户需求
- 在实施前验证理解的准确性
- 自动收集并记录需求到 `.cursor/rules/req.mdc`

### 2. 时间上下文
- 优先考虑最新的AI/ML相关信息
- 评估参考资料的时效性
- 优先使用最新版本的文档和库
- 考虑AI技术的快速发展

### 3. 架构设计
- 实现基于多智能体的模块化架构
- 分离关注点：智能体、工具、通信
- 保持OWL框架的核心功能完整
- 遵循依赖注入和接口设计原则
- 复用OWL现有组件
- 避免重复实现已有功能

### 4. 通信与输出
- 将大型输出分割为可管理的片段
- 在所有服务中使用一致的端口号
- 保持与全局目标的一致性
- 确保OWL框架的可升级性
- 用英文思考以保证精确性，尽可能用中文回复

## 技术标准

### 1. 代码组织
```python
# ✅ 推荐：分离关注点
class RequirementsAgent(BaseAgent):
    def __init__(self, config: AgentConfig):
        super().__init__(config)
        
    async def analyze_requirements(self, input: str) -> RequirementsAnalysis:
        # 实现需求分析逻辑
        pass

# ❌ 避免：混合业务逻辑和工具实现
class MixedAgent:
    def do_everything(self):
        # 混合了多个职责
        pass
```

### 2. 测试要求
- 实现核心功能的单元测试
- 使用模拟和存根进行依赖测试
- 提供测试工具和辅助函数
- 实现智能体交互的集成测试

### 3. 错误处理
- 定义清晰的异常层次结构
- 实现有意义的错误消息
- 记录完整的错误上下文
- 确保异常安全性

## 安全指南

### 1. 数据保护
- 加密敏感数据
- 确保通信安全
- 实现访问控制
- 应用数据清理

### 2. 访问控制
- 执行用户认证
- 维护审计日志
- 防止权限提升
- 支持多因素认证

### 3. 系统安全
- 验证所有输入
- 防止注入攻击
- 保护against XSS
- 进行安全扫描

## 性能标准

### 1. 响应时间
- 保持API响应时间在500ms以内
- 实现批处理操作的进度跟踪
- 使用异步处理长时间运行的任务
- 跟踪性能指标

### 2. 资源管理
- 优化内存使用
- 监控CPU使用率
- 防止资源泄漏
- 实现资源限制

## 实现规则

### 1. 创建新功能时
- 分析现有OWL实现
- 遵循已建立的模式
- 扩展而不是替换
- 记录集成点

### 2. 修改现有代码时
- 保持原有功能
- 维护向后兼容性
- 为新功能添加测试
- 更新文档

### 3. 处理依赖关系时
- 使用指定的版本范围
- 记录破坏性变更
- 维护依赖关系图
- 定期更新安全补丁

## 文档要求

### 1. 代码文档
- 编写清晰的函数描述
- 记录参数和返回类型
- 提供使用示例
- 解释复杂算法

### 2. 架构文档
- 维护系统图表
- 记录组件交互
- 描述数据流
- 更新集成指南
- 记录多智能体通信模式

## 开发规范

### 1. 小有成果之后就提交到远程仓库，养成好习惯
